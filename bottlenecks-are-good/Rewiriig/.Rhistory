geom_point() +
geom_smooth(se=FALSE,aes(color=city)) +
ggtitle("up-up-down-up") +
scale_y_continuous(limits = c(90,500))
p3 <- ggplot(subset(data, trend=="upupup"), aes(x=date,y=price,color=city)) +
geom_point() +
geom_smooth(se=FALSE,aes(color=city)) +
ggtitle("up-up-up-up") +
scale_y_continuous(limits = c(90,500))
p4 <- ggplot(subset(data, trend=="upupupdown"), aes(x=date,y=price,color=city)) +
geom_point() +
geom_smooth(se=FALSE,aes(color=city)) +
ggtitle("up-up-up-down") +
scale_y_continuous(limits = c(90,500))
grid.arrange(p1,p2,p3,p4)
get.predictors <- function(t) {
return(data.frame(t=t,
sin = sin(pi/6*t), # 12 month period
cos = cos(pi/6*t),
sin2 = sin(pi/3*t), # 6 month period
cos2 = cos(pi/3*t)
)
)
}
# predicting prices based on the existing prices
get.predictions <- function(price.trend,time.end) {
lmfit <- lm(y ~ sin+cos+sin2+cos2,data=price.trend)
prediction.time <- 1:time.end
return(price.prediction <- data.frame(t=prediction.time,y=predict(lmfit,get.predictors(prediction.time))))
}
get.coeffs <- function(price.trend,time.end) {
lmfit <- lm(y ~ sin+cos+sin2+cos2,data=price.trend)
return(lmfit$coefficients)
}
# for every city plot the prediction in put them in p
p <- lapply(data.summary$city,function(the_city) {
price.train = get.predictors(1:9)  # getting the predictors
price.train$y = data$price[data$city==the_city][1:9]  # getting the ouput for training data
price.trend = get.predictors(1:10)
price.trend$y = data$price[data$city==the_city][1:10]
price.prediction <- get.predictions(price.train,10)
ggplot(price.trend, aes(x=t,y=y)) +
geom_point() +
geom_point(data=price.prediction, aes(x=t,y=y),color="red") +
geom_line(data=price.prediction, aes(x=t,y=y),color="red") +
geom_line() +
ggtitle(the_city)
})
do.call(grid.arrange, c(p[c(3,19,22)], list(ncol=3)))  # I need this do.call to take out the plots from p
do.call(grid.arrange, c(p[c(1,12,20,23)], list(ncol=2)))
# plotting the predictions
p <- lapply(data.summary$city,function(the_city) {
price.train = get.predictors(1:10)
price.train$y = data$price[data$city==the_city][1:10]
price.trend = get.predictors(1:10)
price.trend$y = data$price[data$city==the_city][1:10]
price.prediction <- get.predictions(price.train,12)
ggplot(price.trend, aes(x=t,y=y)) +
geom_point() +
geom_line(data=price.prediction, aes(x=t,y=y),color="red",size=1.4) +
geom_line() +
ggtitle(the_city)
})
do.call(grid.arrange, c(p[c(1:9)], list(ncol=3)))
do.call(grid.arrange, c(p[c(10:18)], list(ncol=3)))
do.call(grid.arrange, c(p[c(19:25)], list(ncol=3)))
# predicting november and december prices!
data.estimated <- data.csv[c(1:11)]
for (the_city in data.summary$city) {
price.train = get.predictors(1:10)
price.train$y = data$price[data$city==the_city][1:10]
price.prediction <- get.predictions(price.train,12)
data.estimated$November(aprox.)[data.tabular$city==the_city] <- round(price.prediction$y[11])
data.estimated$December(aprox.)[data.tabular$city==the_city] <- round(price.prediction$y[12])
}
data.estimated[c("city","November(aprox.)","December(aprox.)")]
# predicting november and december prices!
data.estimated <- data.csv[c(1:11)]
for (the_city in data.summary$city) {
price.train = get.predictors(1:10)
price.train$y = data$price[data$city==the_city][1:10]
price.prediction <- get.predictions(price.train,12)
data.estimated$November_aprox[data.tabular$city==the_city] <- round(price.prediction$y[11])
data.estimated$December_aprox[data.tabular$city==the_city] <- round(price.prediction$y[12])
}
data.estimated[c("city","November_aprox","November_aprox")]
data.estimated <- data.csv[c(1:13)]
for (the_city in data.summary$city) {
price.train = get.predictors(1:10)
price.train$y = data$price[data$city==the_city][1:10]
price.prediction <- get.predictions(price.train,12)
data.estimated$November_aprox[data.tabular$city==the_city] <- round(price.prediction$y[11])
data.estimated$December_aprox[data.tabular$city==the_city] <- round(price.prediction$y[12])
}
data.estimated[c("city","November", "November_aprox", "December", "December_aprox")]
do.call(grid.arrange, c(p[c(1:9)], list(ncol=3)))
price.verify = get.predictors(1:12)
price.verify$y = data$price[data$city==the_city][1:12]
price.verify$y = data$price[data$city==the_city][1:12]
ggplot(price.verify, aes(x=t,y=y)) +
geom_point() +
geom_line(data=price.prediction, aes(x=t,y=y),color="red",size=1.4) +
geom_line() +
ggtitle(the_city)
# training
price.train = get.predictors(1:10)
price.train$y = data$price[data$city==the_city][1:10]
# to verify
price.verify = get.predictors(1:12)
price.verify$y = data$price[data$city==the_city][1:12]
# predictions
price.trend = get.predictors(1:10)
price.trend$y = data$price[data$city==the_city][1:10]
price.prediction <- get.predictions(price.train,12)
ggplot(price.verify, aes(x=t,y=y)) +
geom_point() +
geom_line(data=price.prediction, aes(x=t,y=y),color="red",size=1.4) +
geom_line() +
ggtitle(the_city)
p <- lapply(data.summary$city,function(the_city) {
# training
price.train = get.predictors(1:10)
price.train$y = data$price[data$city==the_city][1:10]
# to verify
price.verify = get.predictors(1:12)
price.verify$y = data$price[data$city==the_city][1:12]
# predictions
price.trend = get.predictors(1:10)
price.trend$y = data$price[data$city==the_city][1:10]
price.prediction <- get.predictions(price.train,12)
ggplot(price.verify, aes(x=t,y=y)) +
geom_point() +
geom_line(data=price.prediction, aes(x=t,y=y),color="red",size=1.4) +
geom_line() +
ggtitle(the_city)
})
do.call(grid.arrange, c(p[c(1:9)], list(ncol=3)))
price.verify
data
data$price
# for verification
data_verify <- melt(data.tabular[,c(1:13)], id="city") # melts the matrix to a long list
data_verify <- setNames(data_verify[c("city", "variable", "value")], c("city", "month", "price"))  # changing the column names after melting them
data_verify$date <- as.Date(paste("01",data_verify$month,"15",sep=""),"%d%B%Y")   # converting the month names to date
# plotting the predictions
p <- lapply(data.summary$city,function(the_city) {
# training
price.train = get.predictors(1:10)
price.train$y = data$price[data$city==the_city][1:10]
# to verify
price.verify = get.predictors(1:12)
price.verify$y = data_verify$price[data_verify$city==the_city][1:12]
# predictions
price.trend = get.predictors(1:10)
price.trend$y = data$price[data$city==the_city][1:10]
price.prediction <- get.predictions(price.train,12)
ggplot(price.verify, aes(x=t,y=y)) +
geom_point() +
geom_line(data=price.prediction, aes(x=t,y=y),color="red",size=1.4) +
geom_line() +
ggtitle(the_city)
})
do.call(grid.arrange, c(p[c(1:9)], list(ncol=3)))
data.estimated[c("city","November", "November_aprox", "December", "December_aprox")]
rm(ls=all())
x = data.frame(linking=integer(), degree=integer())
x = data.frame(linking=integer(), degree=integer())
View(x)
x = data.frame(linking=6, degree=8)
data.N50m2 <- read.csv(file="linking_50_2.csv")
setwd("~/sandbox/dynamic-complex-networks/bottlenecks-are-good/Rewiriig")
data.N50m2 <- read.csv(file="linking_50_2.csv")
View(data.N50m2)
library(ggplot2)
ggplot(data=data.N50m2, aes(x=degree, y=rewiring))  +
geom_boxplot()
ggplot(data=data.N50m2, aes(x=degree, y=linking))  +
geom_boxplot()
ggplot(data=data.N50m2, aes(x=degree, y=linking))  +
geom_boxplot(aes(x=degree, y=linking))
ggplot(data=data.N50m2, aes(x=degree, y=linking))  +
geom_boxplot(aes(x=degree, y=linking, group=degree))
ggplot(data=data.N50m2, aes(x=degree, y=linking))  +
geom_boxplot(aes(x=degree, y=linking, group=degree)) +
labs(x="Min(Source Degree, Target Degree)", y="Size of Linking")
ggplot(data=data.N50m2, aes(x=degree, y=linking))  +
geom_boxplot(aes(x=degree, y=linking, group=degree)) +
labs(x="Min(Source Degree, Target Degree)", y="Size of Linking") +
jitter()
ggplot(data=data.N50m2, aes(x=degree, y=linking))  +
geom_boxplot(aes(x=degree, y=linking, group=degree)) +
jitter() +
labs(x="Min(Source Degree, Target Degree)", y="Size of Linking")
ggplot(data=data.N50m2, aes(x=degree, y=linking))  +
geom_boxplot(aes(x=degree, y=linking, group=degree)) +
jitter(aes(x=degree, y=linking, group=degree)) +
labs(x="Min(Source Degree, Target Degree)", y="Size of Linking")
str(x)
ggplot(data=data.N50m2, aes(x=degree, y=linking))  +
geom_boxplot(aes(x=degree, y=linking, group=degree)) +
geom_jitter(aes(x=degree, y=linking, group=degree)) +
labs(x="Min(Source Degree, Target Degree)", y="Size of Linking")
ggplot(data=data.N50m2, aes(x=degree, y=linking))  +
geom_boxplot(aes(x=degree, y=linking, group=degree)) +
geom_jitter(aes(x=degree, y=linking, group=degree), color="red") +
labs(x="Min(Source Degree, Target Degree)", y="Size of Linking")
ggplot(data=data.N50m2, aes(x=degree, y=linking))  +
geom_boxplot(aes(x=degree, y=linking, group=degree)) +
geom_jitter(aes(x=degree, y=linking, group=degree), color="blue") +
labs(x="Min(Source Degree, Target Degree)", y="Size of Linking")
ggplot(data=data.N50m2, aes(x=degree, y=linking))  +
geom_boxplot(aes(x=degree, y=linking, group=degree)) +
geom_jitter(aes(x=degree, y=linking, group=degree), color="blue", width=.5) +
labs(x="Min(Source Degree, Target Degree)", y="Size of Linking")
ggplot(data=data.N50m2, aes(x=degree, y=linking))  +
geom_boxplot(aes(x=degree, y=linking, group=degree)) +
geom_jitter(aes(x=degree, y=linking, group=degree), color="blue", width=.1) +
labs(x="Min(Source Degree, Target Degree)", y="Size of Linking")
ggplot(data=data.N50m2, aes(x=degree, y=linking))  +
geom_boxplot(aes(x=degree, y=linking, group=degree)) +
geom_jitter(aes(x=degree, y=linking, group=degree), color="blue", width=.01) +
labs(x="Min(Source Degree, Target Degree)", y="Size of Linking")
ggplot(data=data.N50m2, aes(x=degree, y=linking))  +
geom_boxplot(aes(x=degree, y=linking, group=degree)) +
geom_jitter(aes(x=degree, y=linking, group=degree), color="blue", position = position_jitter(width = 0.1, height = 0.1)) +
labs(x="Min(Source Degree, Target Degree)", y="Size of Linking")
ggplot(data=data.N50m2, aes(x=degree, y=linking))  +
geom_boxplot(aes(x=degree, y=linking, group=degree)) +
geom_jitter(aes(x=degree, y=linking, group=degree), color="blue", position = position_jitter(width = 0.1, height = 0.5)) +
labs(x="Min(Source Degree, Target Degree)", y="Size of Linking")
ggplot(data=data.N50m2, aes(x=degree, y=linking))  +
geom_boxplot(aes(x=degree, y=linking, group=degree)) +
geom_jitter(aes(x=degree, y=linking, group=degree), color="blue", position = position_jitter(width = 0.1)) +
labs(x="Min(Source Degree, Target Degree)", y="Size of Linking")
ggplot(data=data.N50m2, aes(x=degree, y=linking))  +
geom_boxplot(aes(x=degree, y=linking, group=degree)) +
geom_jitter(aes(x=degree, y=linking, group=degree), color="blue", position = position_jitter(width = 0.1)) +
labs(x="Min(Source Degree, Target Degree)", y="Size of Linking")
ggplot(data=data.N50m2, aes(x=degree, y=linking))  +
geom_boxplot(aes(x=degree, y=linking, group=degree)) +
geom_jitter(aes(x=degree, y=linking, group=degree), color="blue", position = position_jitter(width = 0.1, height=0.1)) +
labs(x="Min(Source Degree, Target Degree)", y="Size of Linking")
data.N50m2[data.N50m2$degree==10]
data.N50m2[data.N50m2$degree==10,]
data.N50m2[data.N50m2$degree==9,]
ggplot(data=data.N100m2, aes(x=degree, y=linking))  +
geom_boxplot(aes(x=degree, y=linking, group=degree)) +
geom_jitter(aes(x=degree, y=linking, group=degree), color="blue", position = position_jitter(width = 0.1, height=0.1)) +
labs(x="No. of Disturbances/Outputs", y="Size of Linking")
data.N100m2 <- read.csv(file="linking_100_2.csv")
ggplot(data=data.N100m2, aes(x=degree, y=linking))  +
geom_boxplot(aes(x=degree, y=linking, group=degree)) +
geom_jitter(aes(x=degree, y=linking, group=degree), color="blue", position = position_jitter(width = 0.1, height=0.1)) +
labs(x="No. of Disturbances/Outputs", y="Size of Linking")
dat <- data.N100m2
colnames(dat) <- c("y", "x")
ggplot(data=dat, aes(x=x, y=y))  +
geom_boxplot(aes(group=degree)) +
geom_jitter(aes(group=degree), color="blue", position = position_jitter(width = 0.1, height=0.1)) +
labs(x="No. of Disturbances/Outputs", y="Size of Linking") +
scale_x_continuous(breaks = round(seq(min(dat$x), max(dat$x), by = 0.5),1)) +
scale_y_continuous(breaks = round(seq(min(dat$y), max(dat$y), by = 0.5),1))
ggplot(data=dat, aes(x=x, y=y))  +
geom_boxplot(aes(group=x)) +
geom_jitter(aes(group=x), color="blue", position = position_jitter(width = 0.1, height=0.1)) +
labs(x="No. of Disturbances/Outputs", y="Size of Linking") +
scale_x_continuous(breaks = round(seq(min(dat$x), max(dat$x), by = 0.5),1)) +
scale_y_continuous(breaks = round(seq(min(dat$y), max(dat$y), by = 0.5),1))
ggplot(data=dat, aes(x=x, y=y))  +
geom_boxplot(aes(group=x)) +
geom_jitter(aes(group=x), color="blue", position = position_jitter(width = 0.1, height=0.1)) +
labs(x="No. of Disturbances/Outputs", y="Size of Linking") +
scale_x_continuous(breaks = round(seq(min(dat$x), max(dat$x), by = 1),1)) +
scale_y_continuous(breaks = round(seq(min(dat$y), max(dat$y), by = 1),1))
dat <- data.N50m2
colnames(dat) <- c("y", "x")
ggplot(data=dat, aes(x=x, y=y))  +
geom_boxplot(aes(group=x)) +
geom_jitter(aes(group=x), color="blue", position = position_jitter(width = 0.1, height=0.1)) +
labs(x="Minimum of Size Disturbances/Outputs", y="Size of Linking") +
scale_x_continuous(breaks = round(seq(min(dat$x), max(dat$x), by = 1),1)) +
scale_y_continuous(breaks = round(seq(min(dat$y), max(dat$y), by = 1),1))
dat <- data.N100m2
colnames(dat) <- c("y", "x")
ggplot(data=dat, aes(x=x, y=y))  +
geom_boxplot(aes(group=x)) +
geom_jitter(aes(group=x), color="blue", position = position_jitter(width = 0.1, height=0.1)) +
labs(x="Minimum of Size Disturbances/Outputs", y="Size of Linking") +
scale_x_continuous(breaks = round(seq(min(dat$x), max(dat$x), by = 1),1)) +
scale_y_continuous(breaks = round(seq(min(dat$y), max(dat$y), by = 1),1))
data.N100m4 <- read.csv(file="linking_100_4.csv")
dat <- data.100m4
colnames(dat) <- c("y", "x")
ggplot(data=dat, aes(x=x, y=y))  +
geom_boxplot(aes(group=x)) +
geom_jitter(aes(group=x), color="blue", position = position_jitter(width = 0.1, height=0.1)) +
labs(x="Minimum of Size Disturbances/Outputs", y="Size of Linking") +
scale_x_continuous(breaks = round(seq(min(dat$x), max(dat$x), by = 1),1)) +
scale_y_continuous(breaks = round(seq(min(dat$y), max(dat$y), by = 1),1), title="N=100, m=4")
dat <- data.100m4
colnames(dat) <- c("y", "x")
ggplot(data=dat, aes(x=x, y=y))  +
geom_boxplot(aes(group=x)) +
geom_jitter(aes(group=x), color="blue", position = position_jitter(width = 0.1, height=0.1)) +
labs(x="Minimum of Size Disturbances/Outputs", y="Size of Linking", title="N=100, m=4") +
scale_x_continuous(breaks = round(seq(min(dat$x), max(dat$x), by = 1),1)) +
scale_y_continuous(breaks = round(seq(min(dat$y), max(dat$y), by = 1),1))
dat <- data.N100m2
colnames(dat) <- c("y", "x")
ggplot(data=dat, aes(x=x, y=y))  +
geom_boxplot(aes(group=x)) +
geom_jitter(aes(group=x), color="blue", position = position_jitter(width = 0.1, height=0.1)) +
labs(x="Minimum of Size Disturbances/Outputs", y="Size of Linking") +
scale_x_continuous(breaks = round(seq(min(dat$x), max(dat$x), by = 1),1)) +
scale_y_continuous(breaks = round(seq(min(dat$y), max(dat$y), by = 1),1), title="N=100, m=2")
dat <- data.N100m2
colnames(dat) <- c("y", "x")
ggplot(data=dat, aes(x=x, y=y))  +
geom_boxplot(aes(group=x)) +
geom_jitter(aes(group=x), color="blue", position = position_jitter(width = 0.1, height=0.1)) +
labs(x="Minimum of Size Disturbances/Outputs", y="Size of Linking", title="N=100, m=2") +
scale_x_continuous(breaks = round(seq(min(dat$x), max(dat$x), by = 1),1)) +
scale_y_continuous(breaks = round(seq(min(dat$y), max(dat$y), by = 1),1))
View(data.N100m4)
View(data.N100m2)
data.N50m4 <- read.csv(file="linking_50_4.csv")
dat <- data.100m4
colnames(dat) <- c("y", "x")
ggplot(data=dat, aes(x=x, y=y))  +
geom_boxplot(aes(group=x)) +
geom_jitter(aes(group=x), color="blue", position = position_jitter(width = 0.1, height=0.1)) +
labs(x="Minimum of Size Disturbances/Outputs", y="Size of Linking", title="N=100, m=4") +
scale_x_continuous(breaks = round(seq(min(dat$x), max(dat$x), by = 1),1)) +
scale_y_continuous(breaks = round(seq(min(dat$y), max(dat$y), by = 1),1))
```
data.N50m2 <- read.csv(file="linking_50_2.csv")
data.N50m4 <- read.csv(file="linking_50_4.csv")
data.N100m2 <- read.csv(file="linking_100_2.csv")
data.N100m4 <- read.csv(file="linking_100_4.csv")
clc
max(dat$x,dat$y)
dat <- data.N100m4
colnames(dat) <- c("y", "x")
ggplot(data=dat, aes(x=x, y=y))  +
geom_boxplot(aes(group=x)) +
geom_jitter(aes(group=x), color="blue", position = position_jitter(width = 0.1, height=0.1)) +
labs(x="Size Disturbances/Outputs", y="Size of Linking", title="N=100, m=4") +
scale_x_continuous(breaks = round(seq(min(dat$x), max(dat$x,dat$y), by = 1),1)) +
scale_y_continuous(breaks = round(seq(min(dat$y), max(dat$x,dat$y), by = 1),1))
dat <- data.N100m2
colnames(dat) <- c("y", "x")
ggplot(data=dat, aes(x=x, y=y))  +
geom_boxplot(aes(group=x)) +
geom_jitter(aes(group=x), color="blue", position = position_jitter(width = 0.1, height=0.1)) +
labs(x="Size Disturbances/Outputs", y="Size of Linking", title="N=100, m=2") +
scale_x_continuous(breaks = round(seq(min(dat$x), max(dat$x,dat$y), by = 1),1)) +
scale_y_continuous(breaks = round(seq(min(dat$y), max(dat$x,dat$y), by = 1),1))
ggplot(data=dat, aes(x=x, y=y))  +
geom_boxplot(aes(group=x)) +
geom_jitter(aes(group=x), color="blue", position = position_jitter(width = 0.1, height=0.1)) +
labs(x="Size Disturbances/Outputs", y="Size of Linking", title="N=100, m=2") +
scale_x_continuous(breaks = round(seq(min(dat$x,dat$y), max(dat$x,dat$y), by = 1),1)) +
scale_y_continuous(breaks = round(seq(min(data$x,dat$y), max(dat$x,dat$y), by = 1),1))
dat <- data.N100m2
colnames(dat) <- c("y", "x")
ggplot(data=dat, aes(x=x, y=y))  +
geom_boxplot(aes(group=x)) +
geom_jitter(aes(group=x), color="blue", position = position_jitter(width = 0.1, height=0.1)) +
labs(x="Size Disturbances/Outputs", y="Size of Linking", title="N=100, m=2") +
scale_x_continuous(breaks = round(seq(min(dat$x,dat$y), max(dat$x,dat$y), by = 1),1)) +
scale_y_continuous(breaks = round(seq(min(data$x,dat$y), max(dat$x,dat$y), by = 1),1))
dat <- data.N100m2
colnames(dat) <- c("y", "x")
ggplot(data=dat, aes(x=x, y=y))  +
geom_boxplot(aes(group=x)) +
geom_jitter(aes(group=x), color="blue", position = position_jitter(width = 0.1, height=0.1)) +
labs(x="Size Disturbances/Outputs", y="Size of Linking", title="N=100, m=2") +
scale_x_continuous(breaks = round(seq(min(dat$x,dat$y), max(dat$x,dat$y), by = 1),1)) +
scale_y_continuous(breaks = round(seq(min(dat$x,dat$y), max(dat$x,dat$y), by = 1),1))
max(dat$x,dat$y)
seq(min(dat$x,dat$y), max(dat$x,dat$y)
)
data.N50m2.R <- read.csv(file="regular_50_2.csv")
data.N50m2 <- read.csv(file="linking_50_2.csv")
data.N50m4 <- read.csv(file="linking_50_4.csv")
data.N100m2 <- read.csv(file="linking_100_2.csv")
data.N100m4 <- read.csv(file="linking_100_4.csv")
data.N50m2.R <- read.csv(file="regular_50_2.csv")
data.N50m4.R <- read.csv(file="regular_50_4.csv")
data.N100m2.R <- read.csv(file="regular_100_2.csv")
data.N100m4.R <- read.csv(file="regular_100_4.csv")
dat <- data.N50m2.R
colnames(dat) <- c("y", "x")
ggplot(data=dat, aes(x=x, y=y))  +
geom_boxplot(aes(group=x)) +
geom_jitter(aes(group=x), color="blue", position = position_jitter(width = 0.1, height=0.1)) +
labs(x="Size of Disturbances/Outputs", y="Size of Linking", title="Regular Network, N=50, degree=4") +
scale_x_continuous(breaks = round(seq(min(dat$x), max(dat$x), by = 1),1)) +
scale_y_continuous(breaks = round(seq(min(dat$y), max(dat$y), by = 1),1))
dat <- data.N50m4.R
colnames(dat) <- c("y", "x")
ggplot(data=dat, aes(x=x, y=y))  +
geom_boxplot(aes(group=x)) +
geom_jitter(aes(group=x), color="blue", position = position_jitter(width = 0.1, height=0.1)) +
labs(x="Size of Disturbances/Outputs", y="Size of Linking", title="Regular Network, N=50, degree=8") +
scale_x_continuous(breaks = round(seq(min(dat$x), max(dat$x), by = 1),1)) +
scale_y_continuous(breaks = round(seq(min(dat$y), max(dat$y), by = 1),1))
dat <- data.N50m4.R[data.N50m4.R$degree==8,]
colnames(dat) <- c("y", "x")
ggplot(data=dat, aes(x=x, y=y))  +
geom_boxplot(aes(group=x)) +
geom_jitter(aes(group=x), color="blue", position = position_jitter(width = 0.1, height=0.1)) +
labs(x="Size of Disturbances/Outputs", y="Size of Linking", title="Regular Network, N=50, degree=8") +
scale_x_continuous(breaks = round(seq(min(dat$x), max(dat$x), by = 1),1)) +
scale_y_continuous(breaks = round(seq(min(dat$y), max(dat$y), by = 1),1))
dat <- data.N50m2.R[data.N50m4.R$degree==4,]
colnames(dat) <- c("y", "x")
ggplot(data=dat, aes(x=x, y=y))  +
geom_boxplot(aes(group=x)) +
geom_jitter(aes(group=x), color="blue", position = position_jitter(width = 0.1, height=0.1)) +
labs(x="Size of Disturbances/Outputs", y="Size of Linking", title="Regular Network, N=50, degree=4") +
scale_x_continuous(breaks = round(seq(min(dat$x), max(dat$x), by = 1),1)) +
scale_y_continuous(breaks = round(seq(min(dat$y), max(dat$y), by = 1),1))
dat <- data.N50m2.R[data.N50m4.R$degree==4,]
colnames(dat) <- c("y", "x")
ggplot(data=dat, aes(x=x, y=y))  +
geom_boxplot(aes(group=x)) +
geom_jitter(aes(group=x), color="blue", position = position_jitter(width = 0.1, height=0.1)) +
labs(x="Size of Disturbances/Outputs", y="Size of Linking", title="Regular Network, N=50, degree=4") +
scale_x_continuous(breaks = round(seq(min(dat$x), max(dat$x), by = 1),1)) +
scale_y_continuous(breaks = round(seq(min(dat$y), max(dat$y), by = 1),1))
data.N50m2.R
dat <- data.N50m2.R[data.N50m2.R$degree==4,]
colnames(dat) <- c("y", "x")
ggplot(data=dat, aes(x=x, y=y))  +
geom_boxplot(aes(group=x)) +
geom_jitter(aes(group=x), color="blue", position = position_jitter(width = 0.1, height=0.1)) +
labs(x="Size of Disturbances/Outputs", y="Size of Linking", title="Regular Network, N=50, degree=4") +
scale_x_continuous(breaks = round(seq(min(dat$x), max(dat$x), by = 1),1)) +
scale_y_continuous(breaks = round(seq(min(dat$y), max(dat$y), by = 1),1))
dat <- data.N50m2.R[data.N50m2.R$degree==4,]
colnames(dat) <- c("y", "x")
ggplot(data=dat, aes(x=x, y=y))  +
geom_boxplot(aes(group=x)) +
geom_jitter(aes(group=x), color="blue", position = position_jitter(width = 0.1, height=0.1)) +
labs(x="Size of Disturbances/Outputs", y="Size of Linking", title="Regular Network, N=50, degree=4") +
scale_x_continuous(breaks = round(seq(min(dat$x), max(dat$x), by = 1),1)) +
scale_y_continuous(breaks = round(seq(min(dat$y), max(dat$y), by = 1),1))
ggplot(data=dat, aes(x=y))  +
geom_histogram() +
labs(x="Size of Linking", title="Regular Network, N=50, degree=4")
ggplot(data=dat, aes(x=y))  +
geom_histogram() +
labs(x="Size of Linking", title="Regular Network, N=50, degree=8")
dat <- data.N50m4.R[data.N50m4.R$degree==8,]
colnames(dat) <- c("y", "x")
ggplot(data=dat, aes(x=x, y=y))  +
geom_boxplot(aes(group=x)) +
geom_jitter(aes(group=x), color="blue", position = position_jitter(width = 0.1, height=0.1)) +
labs(x="Size of Disturbances/Outputs", y="Size of Linking", title="Regular Network, N=50, degree=8") +
scale_x_continuous(breaks = round(seq(min(dat$x), max(dat$x), by = 1),1)) +
scale_y_continuous(breaks = round(seq(min(dat$y), max(dat$y), by = 1),1))
ggplot(data=dat, aes(x=y))  +
geom_histogram() +
labs(x="Size of Linking", title="Regular Network, N=50, degree=8")
data.N100m2.R <- read.csv(file="regular_100_2.csv")
dat <- data.N100m2.R
colnames(dat) <- c("y", "x")
ggplot(data=dat, aes(x=x, y=y))  +
geom_boxplot(aes(group=x)) +
geom_jitter(aes(group=x), color="blue", position = position_jitter(width = 0.1, height=0.1)) +
labs(x="Size of Disturbances/Outputs", y="Size of Linking", title="Regular Network, N=100, degree=8") +
scale_x_continuous(breaks = round(seq(min(dat$x), max(dat$x), by = 1),1)) +
scale_y_continuous(breaks = round(seq(min(dat$y), max(dat$y), by = 1),1))
dat <- data.N100m2.R[data.N100m2.R$degree==4,]
colnames(dat) <- c("y", "x")
ggplot(data=dat, aes(x=x, y=y))  +
geom_boxplot(aes(group=x)) +
geom_jitter(aes(group=x), color="blue", position = position_jitter(width = 0.1, height=0.1)) +
labs(x="Size of Disturbances/Outputs", y="Size of Linking", title="Regular Network, N=100, degree=8") +
scale_x_continuous(breaks = round(seq(min(dat$x), max(dat$x), by = 1),1)) +
scale_y_continuous(breaks = round(seq(min(dat$y), max(dat$y), by = 1),1))
ggplot(data=dat, aes(x=y))  +
geom_histogram() +
labs(x="Size of Linking", title="Regular Network, N=100, degree=4")
data.N50m2.SW <- read.csv(file="small_50_2.csv")
dat <- data.N50m2.SW
colnames(dat) <- c("y", "x")
ggplot(data=dat, aes(x=x, y=y))  +
geom_boxplot(aes(group=x)) +
geom_jitter(aes(group=x), color="blue", position = position_jitter(width = 0.1, height=0.1)) +
labs(x="Size of Disturbances/Outputs", y="Size of Linking", title="Regular Network, N=50, degree=4") +
scale_x_continuous(breaks = round(seq(min(dat$x), max(dat$x), by = 1),1)) +
scale_y_continuous(breaks = round(seq(min(dat$y), max(dat$y), by = 1),1))
dat <- data.N50m2.SW
colnames(dat) <- c("y", "x")
ggplot(data=dat, aes(x=x, y=y))  +
geom_boxplot(aes(group=x)) +
geom_jitter(aes(group=x), color="blue", position = position_jitter(width = 0.1, height=0.1)) +
labs(x="Size of Disturbances/Outputs", y="Size of Linking", title="Small World Network, N=50, degree=4") +
scale_x_continuous(breaks = round(seq(min(dat$x), max(dat$x), by = 1),1)) +
scale_y_continuous(breaks = round(seq(min(dat$y), max(dat$y), by = 1),1))
data.N50m4.SW <- read.csv(file="small_50_5.csv")
data.N50m4.SW <- read.csv(file="small_50_4.csv")
dat <- data.N50m4.SW
colnames(dat) <- c("y", "x")
ggplot(data=dat, aes(x=x, y=y))  +
geom_boxplot(aes(group=x)) +
geom_jitter(aes(group=x), color="blue", position = position_jitter(width = 0.1, height=0.1)) +
labs(x="Size of Disturbances/Outputs", y="Size of Linking", title="Small World Network, N=50, degree=8, Prob.= 0.4") +
scale_x_continuous(breaks = round(seq(min(dat$x), max(dat$x), by = 1),1)) +
scale_y_continuous(breaks = round(seq(min(dat$y), max(dat$y), by = 1),1))
